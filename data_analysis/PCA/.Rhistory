df <- read.csv('../data/input4R.csv')
df <- read.csv('/media/valentin/Data/SR/data/input4R.csv')
str(df)
pca <- prcomp(df1.stand,center = T, scale=T)
pca <- prcomp(df.stand,center = T, scale=T)
pca <- prcomp(df,center = T, scale=T)
df1 <- df[, colSums(df != 0) > 0]
pca <- prcomp(df1,center = T, scale=T)
summary(pca)
cor(df1$Class, pca$x[,1])
cor(df1$Class, pca$x[,1
2])
cor(df1$Class, pca$x[,2])
cor(df1$Class, pca$x[,3])
cor(df1$Class, pca$x[,4])
cor(df1$Class, pca$x[,5])
cor(df1$Class, pca$x[,6])
screeplot(pca, type="lines",npcs = 50)
biplot(pca, xlim=c(-1,1), arrow.length=0)
df1.classes = df1[, 1]
df1.classes
pca_df = data.frame(pc1 = pca$x[, 1], pc2 = pca$x[, 2], classes=df1.classes)
qplot(pc1, pc2, colour = classes, data = pca_df)
attach( pca_df ); plot( pc1, pc2, col=c("red","green")[pca_df$cla] ); detach( pca_df )
pca_df = data.frame(pc1 = pca$x[1:249, 1], pc2 = pca$x[1:249, 2])
attach( pca_df ); plot( pc1, pc2, col='blue' ); detach( pca_df )
pca_df = data.frame(pc1 = pca$x[250:407, 1], pc2 = pca$x[250:407, 2])
attach( pca_df ); plot( pc1, pc2, col='red' ); detach( pca_df )
pca_df = data.frame(pc1 = pca$x[, 1], pc2 = pca$x[, 2], classes=df1.classes)
qplot(pc1, pc2, colour = classes, data = pca_df)
screeplot(pca, type="lines",npcs = 50)
biplot(pca, xlim=c(-1,1), arrow.length=0)
autoplot(pca, data = df, colour = 'Species')
autoplot(pca, data = df, colour = 'Class')
library(ggfortify)
install.packages("ggfortify")
library(ggfortify)
autoplot(pca, data = df, colour = 'Class')
summary(pca)
str(pca)
pca$rotation
str(df1)
pca <- prcomp(df1[, 2:58432],center = T, scale=T)
pca$rotation
library(ggfortify)
autoplot(pca, data = df, colour = 'Class')
cor(df1$Class, pca$x[,1])
cor(df1$Class, pca$x[,2])
pca$rotation
str(df1)
summ(pca)
summary(pca)
pca <- prcomp(df1[, 2:58432], scale=T)
autoplot(pca, data = df, colour = 'Class')
str(pca)
pca$rotation
pca$sdev
pca$x
summary(pca)
str(df1)
str(pca)
summary(pca)
str(summary(pca))
summary(pca)['importance']
summary(pca)['importance'][1,]
summary(pca)['importance'][1,1:]
pca$importance
summary(pca)['importance'][1,]
summary(pca)['importance'][1,,]
summary(pca)['importance'][1]
summary(pca)['importance'][1][1,]
screeplot(pca, type="lines",npcs = 50)
pca$center
pca$rotation
pca$rotation[1:5,1:5]
pca$rotation[1:60000,1:5]
pca$rotation[1:6000,1:5]
pca$x
#VISUALISATION
# How many conponents should we choose?
#screeplot(pca, type="lines",npcs = 50)
std_dev <- pca$sdev
vari <- std_dev^2
prop_varex <- vari/sum(vari)
plot(prop_varex, xlab =  "Principal Component",
ylab = "Proportion of Variance Explained",
type = "b")
plot(prop_varex[1:30], xlab =  "Principal Component",
ylab = "Proportion of Variance Explained",
type = "b")
prop_varex[1:30]
prop_varex[1:50]
prop_varex[1:100]
prop_varex[101:500]
prop_varex[101:307]
#VISUALISATION
# How many conponents should we choose?
std_dev <- pca$sdev
vari <- std_dev^2
prop_varex <- vari/sum(vari)
prop_varex[101:307]
plot(prop_varex[1:30], xlab =  "Principal Component",
ylab = "Proportion of Variance Explained",
type = "b")
summary(pca)
pca$x
pca$x[1:100]
pca$x[1:60488]
summary(pca)
pca$x[1:60488]
str(pca$x)
library(factoextra)
install.packages("factoextra")
# Results for Variables
res.var <- get_pca_var(res.pca)
# Results for Variables
res.var <- get_pca_var(pca)
library(factoextra)
# Results for Variables
res.var <- get_pca_var(pca)
res.var$coord          # Coordinates
res.var$cos2           # Quality of representation
str(pca$x)
pca$x[1:10, 1:10]
write.table(pca$x,file="out.txt")
write.table(pca$x,file="pca_x.txt", sep="\t")
df <- read.csv('/media/valentin/Data/SR/data/input4R_1.csv')
df <- read.csv('/media/valentin/Data/SR/data/input4R_1.csv')
str(df)
# remove cols with all zeros
df1 <- df[, colSums(df != 0) > 0]
str(df1)
df <- read.csv('/media/valentin/Data/SR/data/input4R_1.csv')
# remove cols with all zeros
df1 <- df[, colSums(df != 0) > 0]
str(df1)
pca <- prcomp(df1[, 2:58432], scale=T)
library(ggfortify)
autoplot(pca, data = df, colour = 'Class')
autoplot(pca, data = df, colour = 'Class')
pca <- prcomp(df1[, 2:58432], scale=T)
autoplot(pca, data = df, colour = 'Class')
write.table(pca$x, file = "x_1.txt", sep = "\t")
df <- read.csv('/media/valentin/Data/SR/data/input4R_1.csv')
# remove cols with all zeros
df1 <- df[, colSums(df != 0) > 0]
pca <- prcomp(df1[, 2:58432], scale=T)
str(df1)
pca <- prcomp(df1[, 2:58431], scale=T)
autoplot(pca, data = df, colour = 'Class')
df <- read.csv('/media/valentin/Data/SR/data/input4R_1.csv')
# remove cols with all zeros
df1 <- df[, colSums(df != 0) > 0]
str(df1)
pca <- prcomp(df1[, 2:58399], scale=T)
autoplot(pca, data = df, colour = 'Class')
#VISUALISATION
# How many conponents should we choose?
std_dev <- pca$sdev
vari <- std_dev^2
prop_varex <- vari/sum(vari)
# 230 components - 90%, 307 components - 96%
plot(prop_varex[1:30], xlab =  "Principal Component",
ylab = "Proportion of Variance Explained",
type = "b")
df <- read.csv('/media/valentin/Data/SR/data/input4R.csv')
# remove cols with all zeros
df1 <- df[, colSums(df != 0) > 0]
str(df1)
pca <- prcomp(df1[, 2:58432], scale=T)
# correlation between Class and PC
cor(df1$Class, pca$x[,1])
#VISUALISATION
# How many conponents should we choose?
std_dev <- pca$sdev
vari <- std_dev^2
prop_varex <- vari/sum(vari)
prop_varex[1:307]
# 230 components - 90%, 307 components - 96%
plot(prop_varex[1:30], xlab =  "Principal Component",
ylab = "Proportion of Variance Explained",
type = "b")
library(ggfortify)
autoplot(pca, data = df, colour = 'Class')
str(pca$x)
pca$x[1:10, 1:10]
write.table(pca$x,file="pca_x.txt", sep="\t")
